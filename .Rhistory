rm(i)
# Switch to long format
snowfall_events <- snowfall_events %>%
rename(day_of_snowfall = CamDate) %>%
tidyr::gather(key = snowfall_category, value = category_date,
one_before,two_before, day_of_snowfall, one_after,
two_after, three_after) %>%
group_by(Device) %>%
dplyr::arrange(Device,category_date)
# Create controls
# Controls are three random dates that do not belong to any snowfall_category
# N = 3 to balance number of observations
# Create list of dates that *cannot* be used for controls
snowfall_dates <- snowfall_events %>%
dplyr::group_by(Device) %>%
dplyr::distinct(category_date, .keep_all=TRUE)
# Returns fewer rows than snowfall_events because of 2013-03-21 / 03-22
rm(snowfall_events)
random_dates <- telem_snow %>%
filter(!is.na(speed)) %>%
filter(!is.na(SnowAccum)) %>%
group_by(Device) %>%
filter(!(CamDate %in% snowfall_dates$category_date)) %>%
sample_n(3,replace = FALSE) %>%
select(Device,CamDate)
# 6 observations * 17 wolves = 102 random dates
# Subset telemetry date to only include these random dates
random_telem <- telem_snow %>%
group_by(Device) %>%
filter(CamDate %in% random_dates$CamDate)
random_telem$snowfall_category = "control"
random_dates$snowfall_category = "control"
# Check
# max(random_telem$SnowAccum) # Should not be >= 5 cm
# Subset telem_snow to only include snowfall_dates
# Then merge with random_telem
# Left join by Device and category_date = CamDate
# Remove repeating columns
snowfall_dates <- snowfall_dates %>%
select(-c(Camera,SnowAccum,SnowDepth))
snowfall_telem <- right_join(telem_snow,snowfall_dates,
by = c("Device" = "Device",
"CamDate" = "category_date"))
snowfall_telem <- plyr::rbind.fill(snowfall_telem,random_telem)
unique(snowfall_telem$snowfall_category)
# Export category dates for reference
random_dates <- random_dates %>%
rename(category_date = CamDate) %>%
select(Device,snowfall_category,category_date)
snowfall_dates <- plyr::rbind.fill(snowfall_dates,random_dates)
write.csv(snowfall_dates,'data/outputs/snowfall_category_dates.csv',
row.names=F)
rm(random_telem,snowfall_dates,random_dates)
travel_speed_summary <- snowfall_telem %>%
filter(Behavior==1 & !is.na(speed)) %>% # Only include travelling behaviour
group_by(Device,snowfall_category) %>%
summarize(mean.speed = mean(speed), sd.speed = sd(speed),
no_of_obs = length(Hour))
View(snowfall_telem)
View(telem_snow)
View(travel_speed_summary)
install.packages("car")
library(car)
##QQplot for normality - good enough for me
qqPlot(travel_speed_summary$speed,
pch=20,ylab="Average travel speed (m/min)",xlab="Normal quantiles")
##QQplot for normality - good enough for me
qqPlot(travel_speed_summary$mean.speed,
pch=20,ylab="Average travel speed (m/min)",xlab="Normal quantiles")
View(travel_speed_summary)
install.packages("ez")
library(ez)
# Sphericity test
travel_speed_summary$snowfall_category <- factor(travel_speed_summary$snowfall_category) ##drop unused factors as this is causing error messages
travel_speed_summary$Device <- factortravel_speed_summary$Device)
travel_speed_summary$Device <- factortravel_speed_summary$Device
travel_speed_summary$Device <- factor(travel_speed_summary$Device)
ezANOVA(data=travel_speed_summary, dv=.(mean.speed),
wid=.(Device), within=.(snowfall_category), detailed=TRUE)
ezANOVA(data=travel_speed_summary, dv=.(mean.speed),
wid=.(Device), within=.(snowfall_category), detailed=TRUE)
Model<-lme(sp ~ storm, random = ~1|Device_ID/storm,data=AMsum)
??lme
install.packages("lme4")
install.packages("lme4")
library(lme4)
install.packages("lme4")
library(lme4)
Model<-lme(sp ~ storm, random = ~1|Device_ID/storm,data=AMsum)
install.packages("nlme")
install.packages("nlme")
library(nlme)
Model<-lme(sp ~ storm, random = ~1|Device_ID/storm,data=AMsum)
# Run the ANOVA test
mean_speed_model <- lme(mean.speed ~ snowfall_category, random = ~1|Device/snowfall_category,
data=travel_speed_summary)
options(contrasts=c("contr.sum","contr.poly"))
# Run the ANOVA test
options(contrasts=c("contr.sum","contr.poly"))
mean_speed_model <- lme(mean.speed ~ snowfall_category, random = ~1|Device/snowfall_category,
data=travel_speed_summary)
anova(Model)
anova(mean_speed_model)
summary(glht(mean_speed_model,linfct=mcp(storm="Tukey")))
install.packages("multcomp")
library(multcomp)
# Summarize data by ID and snowfall category
travel_speed_summary <- snowfall_telem %>%
filter(Behavior==1 & !is.na(speed)) %>% # Only include travelling behaviour
group_by(Device,snowfall_category,time_of_day) %>%
summarize(mean.speed = mean(speed), sd.speed = sd(speed),
no_of_obs = length(Hour))
# Load required packages
library(plyr)
library(dplyr)
travel_speed_summary <- snowfall_telem %>%
filter(Behavior==1 & !is.na(speed)) %>% # Only include travelling behaviour
group_by(Device,snowfall_category,time_of_day) %>%
summarize(mean.speed = mean(speed), sd.speed = sd(speed),
no_of_obs = length(Hour))
View(travel_speed_summary)
## QQplot for normality
qqPlot(travel_speed_summary$mean.speed,
pch=20,ylab="Average travel speed (m/min)",xlab="Normal quantiles")
# Load required packages
library(plyr)
library(dplyr)
library(car)
library(ez)
library(nlme)
## QQplot for normality
qqPlot(travel_speed_summary$mean.speed,
pch=20,ylab="Average travel speed (m/min)",xlab="Normal quantiles")
# Sphericity test
travel_speed_summary$snowfall_category <- factor(travel_speed_summary$snowfall_category)
travel_speed_summary$Device <- factor(travel_speed_summary$Device)
ezANOVA(data=travel_speed_summary, dv=.(mean.speed),
wid=.(Device), within=.(snowfall_category), detailed=TRUE)
mean_speed_model <- lme(mean.speed ~ snowfall_category * time_of_day, random = ~1|Device/snowfall_category,
data=travel_speed_summary)
anova(mean_speed_model)
summary(glht(mean_speed_model,linfct=mcp(storm="Tukey")))
summary(glht(mean_speed_model,linfct=mcp(snowfall_category="Tukey")))
# Run the ANOVA test
options(contrasts=c("contr.sum","contr.poly"))
summary(glht(mean_speed_model,linfct=mcp(snowfall_category="Tukey")))
unique(data_day$time_of_day)
unique(snowfall_telem$time_of_day)
# Separate data in day and night components
data_day <- snowfall_telem %>%
filter(time_of_day == "day")
data_night <- snowfall_telem %>%
filter(time_of_day != "day")
rm(travel_speed_summary)
day_speed_summary <- data_day %>%
filter(Behavior==1 & !is.na(speed)) %>% # Only include travelling behaviour
group_by(Device,snowfall_category,time_of_day) %>%
summarize(mean.speed = mean(speed), sd.speed = sd(speed),
no_of_obs = length(Hour))
View(day_speed_summary)
# Summarize data by ID and snowfall category
day_speed_summary <- data_day %>%
filter(Behavior==1 & !is.na(speed) & Device != 336763) %>% # Only include travelling behaviour
group_by(Device,snowfall_category,time_of_day) %>%
summarize(mean.speed = mean(speed), sd.speed = sd(speed),
no_of_obs = length(Hour))
# Summarize data by ID and snowfall category
day_speed_summary <- data_day %>%
filter(Behavior==1 & !is.na(speed) & Device != 33676) %>% # Only include travelling behaviour
group_by(Device,snowfall_category,time_of_day) %>%
summarize(mean.speed = mean(speed), sd.speed = sd(speed),
no_of_obs = length(Hour))
night_speed_summary <- data_night %>%
filter(Behavior==1 & !is.na(speed)) %>%
group_by(Device,snowfall_category,time_of_day) %>%
summarize(mean.speed = mean(speed), sd.speed = sd(speed),
no_of_obs = length(Hour))
View(night_speed_summary)
day_speed_summary <- data_day %>%
filter(Behavior==1 & !is.na(speed) & Device != 33676) %>%
group_by(Device,snowfall_category,time_of_day) %>%
summarize(mean.speed = mean(speed), sd.speed = sd(speed),
no_of_obs = length(Hour))
night_speed_summary <- data_night %>%
filter(Behavior==1 & !is.na(speed)  & Device != 33676) %>%
group_by(Device,snowfall_category,time_of_day) %>%
summarize(mean.speed = mean(speed), sd.speed = sd(speed),
no_of_obs = length(Hour))
## QQplot for normality
qqPlot(day_speed_summary$mean.speed,
pch=20,ylab="Average travel speed (m/min)",xlab="Normal quantiles")
qqPlot(night_speed_summary$mean.speed,
pch=20,ylab="Average travel speed (m/min)",xlab="Normal quantiles")
day_speed_summary$snowfall_category <- factor(day_speed_summary$snowfall_category)
day_speed_summary$Device <- factor(day_speed_summary$Device)
night_speed_summary$snowfall_category <- factor(night_speed_summary$snowfall_category)
night_speed_summary$Device <- factor(night_speed_summary$Device)
# Sphericity test
ezANOVA(data=day_speed_summary, dv=.(mean.speed),
wid=.(Device), within=.(snowfall_category), detailed=TRUE)
# Sphericity test
ezANOVA(data=night_speed_summary, dv=.(mean.speed),
wid=.(Device), within=.(snowfall_category), detailed=TRUE)
day_speed_summary <- data_day %>%
filter(Behavior==1 & !is.na(speed) & Device != 33676) %>%
group_by(Device,snowfall_category,time_of_day) %>%
summarize(mean.speed = mean(speed), sd.speed = sd(speed),
no_of_obs = length(Hour))
day_speed_summary$snowfall_category <- factor(day_speed_summary$snowfall_category)
day_speed_summary$Device <- factor(day_speed_summary$Device)
night_speed_summary <- data_night %>%
filter(Behavior==1 & !is.na(speed)  & Device != 33676) %>%
group_by(Device,snowfall_category,time_of_day) %>%
summarize(mean.speed = mean(speed), sd.speed = sd(speed),
no_of_obs = length(Hour))
night_speed_summary$snowfall_category <- factor(night_speed_summary$snowfall_category)
night_speed_summary$Device <- factor(night_speed_summary$Device)
# Check assumptions
## QQplot for normality
qqPlot(day_speed_summary$mean.speed,
pch=20,ylab="Average travel speed (m/min)",xlab="Normal quantiles")
qqPlot(night_speed_summary$mean.speed,
pch=20,ylab="Average travel speed (m/min)",xlab="Normal quantiles")
# Sphericity test
ezANOVA(data=night_speed_summary, dv=.(mean.speed),
wid=.(Device), within=.(snowfall_category), detailed=TRUE)
ezANOVA(data=day_speed_summary, dv=.(mean.speed),
wid=.(Device), within=.(snowfall_category), detailed=TRUE)
View(day_speed_summary)
day_speed_summary %>%
group_by(Device) %>%
summarize(obs = length(snowfall_category))
mean_speed_model <- lme(mean.speed ~ snowfall_category, random = ~1|Device/snowfall_category,
data=day_speed_summary)
anova(mean_speed_model)
rm(day_speed_model)
rm(mean_speed_model)
night_speed_model <- lme(mean.speed ~ snowfall_category, random = ~1|Device/snowfall_category,
data=night_speed_summary)
# ANOVA results
anova(day_speed_model)
# Run the ANOVA test
options(contrasts=c("contr.sum","contr.poly"))
day_speed_model <- lme(mean.speed ~ snowfall_category, random = ~1|Device/snowfall_category,
data=day_speed_summary)
night_speed_model <- lme(mean.speed ~ snowfall_category, random = ~1|Device/snowfall_category,
data=night_speed_summary)
# ANOVA results
anova(day_speed_model)
anova(night_speed_model)
summary(glht(night_speed_model,linfct=mcp(snowfall_category="Tukey")))
night_speed_model <- lme(mean.speed ~ snowfall_category, random = ~1|Device,
data=night_speed_summary)
anova(night_speed_model)
summary(glht(night_speed_model,linfct=mcp(snowfall_category="Tukey")))
plot(night_speed_summary$mean.speed,night_speed_summary$snowfall_category)
plot(night_speed_summary$snowfall_category,night_speed_summary$mean.speed)
library(lme4)
unique(data_day$snowfall_category)
data_day <- within(data_day, snowfall_category <-
relevel(snowfall_category, ref = "day_of_snowfall"))
data_day$snowfall_category <- as.factor(data_day$snowfall_category)
data_day <- within(data_day, snowfall_category <-
relevel(snowfall_category, ref = "day_of_snowfall"))
day_proportion_model <- glmer(Behavior ~ snowfall_category +
(1|Device),data=data_day, family=binomial)
summary(day_proportion_model)
plot(data_day$snowfall_category,data_day$Behavior)
plot(data_day$Behavior,data_day$snowfall_category)
plot(as.factor(data_day$Behavior),data_day$snowfall_category)
plot(data_day$snowfall_category,as.factor(data_day$Behavior))
levels(data_day$snowfall_category)
data_day %>%
group_by(Device) %>%
summarize(travel = sum(Behavior),no_of_obs = length(Behavior),
proportion = travel/no_of_obs)
data_day %>%
group_by(Device,snowfall_category) %>%
summarize(travel = sum(Behavior),no_of_obs = length(Behavior),
proportion = travel/no_of_obs)
write.csv(snowfall_telem,'data/outputs/telem_with_snow_categories.csv',row.names=F)
View(subset(snowfall_telem,!is.na(snowfall_category
)))
View(subset(snowfall_telem,is.na(snowfall_category
)))
plot(snowfall_telem,speed,snowfall_category)
plot(snowfall_telem$speed,snowfall_telem$snowfall_category)
plot(snowfall_telem$speed,as.factor(snowfall_telem$snowfall_category))
plot(as.factor(snowfall_telem$snowfall_category),snowfall_telem$speed)
library(dplyr)
library(ggplot2)
snowfall_telem %>%
filter(Behavior == 1) %>% # Only include travel speed
ggplot(aes(x= as.factor(snowfall_catory), y = speed)) +
geom_bar(fill="#880011")
snowfall_telem %>%
filter(Behavior == 1) %>% # Only include travel speed
ggplot(aes(x= as.factor(snowfall_category), y = speed)) +
geom_bar(fill="#880011")
snowfall_telem %>%
filter(Behavior == 1) %>% # Only include travel speed
ggplot(aes(x= as.factor(snowfall_category), y = speed))
snowfall_telem %>%
filter(Behavior == 1) %>% # Only include travel speed
ggplot(aes(x= as.factor(snowfall_category), y = speed)) +
geom_point(alpha=.4, size=4, color="#880011")
snowfall_telem %>%
filter(Behavior == 1) %>% # Only include travel speed
ggplot(aes(x= as.factor(snowfall_category), y = speed)) +
geom_boxplot(outlier.colour="black", outlier.shape=16,
outlier.size=2, notch=FALSE)
?geom_boxplot
snowfall_telem %>%
filter(Behavior == 1) %>% # Only include travel speed
ggplot(aes(x= as.factor(snowfall_category), y = speed)) +
geom_boxplot(outlier.colour="black", outlier.shape=16,
outlier.size=2)
snowfall_telem %>%
filter(Behavior == 1) %>% # Only include travel speed
ggplot(aes(x= as.factor(snowfall_category), y = speed)) +
geom_boxplot(outlier.colour="black", outlier.shape=16,
outlier.size=2) +
ylim=c(3,100)
snowfall_telem %>%
filter(Behavior == 1) %>% # Only include travel speed
ggplot(aes(x= as.factor(snowfall_category), y = speed)) +
geom_boxplot(outlier.colour="black", outlier.shape=16,
outlier.size=2) +
scale_y_continuous(lim=c(3,100))
snowfall_telem %>%
filter(Behavior == 1) %>% # Only include travel speed
ggplot(aes(x= as.factor(snowfall_category), y = speed,
group=Device)) +
geom_boxplot(outlier.colour="black", outlier.shape=16,
outlier.size=2) +
scale_y_continuous(lim=c(3,100))
snowfall_telem %>%
filter(Behavior == 1) %>% # Only include travel speed
ggplot(aes(x= as.factor(snowfall_category), y = speed,
color=Device)) +
geom_boxplot(outlier.colour="black", outlier.shape=16,
outlier.size=2) +
scale_y_continuous(lim=c(3,100))
snowfall_telem %>%
filter(Behavior == 1) %>% # Only include travel speed
ggplot(aes(x= as.factor(snowfall_category), y = speed,
color=Device)) +
geom_point()
ggplot(aes(x= speed,
color=as.factor(snowfall_category)))
snowfall_telem %>%
filter(Behavior == 1) %>% # Only include travel speed
ggplot(aes(x= speed,
color=as.factor(snowfall_category))) +
geom_point()
snowfall_telem %>%
filter(Behavior == 1) %>% # Only include travel speed
ggplot(aes(x= speed,
color=as.factor(snowfall_category)))
snowfall_telem %>%
filter(Behavior == 1) %>% # Only include travel speed
ggplot(aes(speed,
color=as.factor(snowfall_category))) +
geom_point()
snowfall_telem %>%
filter(Behavior == 1) %>% # Only include travel speed
ggplot(aes(x=UID,y=speed,
color=as.factor(snowfall_category))) +
geom_point()
snowfall_telem %>%
filter(Behavior == 1) %>% # Only include travel speed
ggplot(aes(y=UID,x=speed,
color=as.factor(snowfall_category))) +
geom_point()
snowfall_telem %>%
filter(Behavior == 1 & snowfall_category!="control") %>% # Only include travel speed
ggplot(aes(y=UID,x=speed,
color=as.factor(snowfall_category))) +
geom_point()
snowfall_telem %>%
filter(Behavior == 1 & snowfall_category!="control") %>% # Only include travel speed
ggplot(aes(x=UID,y=speed,
color=as.factor(snowfall_category))) +
geom_point()
snowfall_telem %>%
filter(Behavior == 1 & snowfall_category!="control") %>% # Only include travel speed
mutate(rowid = 1:nrow(Behavior)) %>%
ggplot(aes(x=rowid,y=speed,
color=as.factor(snowfall_category))) +
geom_point()
snowfall_telem %>%
filter(Behavior == 1 & snowfall_category!="control") %>% # Only include travel speed
mutate(rowid = 1:length(Behavior)) %>%
ggplot(aes(x=rowid,y=speed,
color=as.factor(snowfall_category))) +
geom_point()
library(nlme)
?lme
# snowfall_telem
snowfall_telem$snowfall_category <- as.factor(snowfall_telem$snowfall_category)
lme(speed ~ snowfall_category + SnowDepth + time_of_day, data=snowfall_telem)
View(snowfall_telem)
lme(speed ~ as.factor(snowfall_category) + SnowDepth + time_of_day, data=snowfall_telem)
lme(speed ~ as.factor(snowfall_category) + as.factor(time_of_day), data=snowfall_telem)
travel_for_model <- snowfall_telem %>%
filter(!is.na(speed) & Behavior == 1)
lme(speed ~ snowfall_category + as.factor(time_of_day), data=travel_for_model)
lm(speed ~ snowfall_category + as.factor(time_of_day), data=travel_for_model)
lm(speed ~ snowfall_category + as.factor(time_of_day), data=travel_for_model)
summary(lm(speed ~ snowfall_category + as.factor(time_of_day), data=travel_for_model))
# Set reference as day_of_snowfall
travel_for_model$snowfall_category <- relevel(travel_for_model$snowfall_category, ref="day_of_snowfall")
summary(lm(speed ~ snowfall_category + as.factor(time_of_day), data=travel_for_model))
lme(speed ~ snowfall_category + as.factor(time_of_day), data=travel_for_model,random = ~ Device)
lme(speed ~ snowfall_category + as.factor(time_of_day), data=travel_for_model,random = ~ as.factor(Device))
lme(speed ~ snowfall_category + as.factor(time_of_day), data=travel_for_model,random = ~ 1)
lme(speed ~ snowfall_category + as.factor(time_of_day), data=travel_for_model,random = ~ 1 | Device)
lme(speed ~ snowfall_category + as.factor(time_of_day) + SnowDepth, data=travel_for_model,random = ~ 1 | Device)
travel_for_model <- snowfall_telem %>%
filter(!is.na(speed) & Behavior == 1 & !is.na(SnowDepth))
lme(speed ~ snowfall_category + as.factor(time_of_day) + SnowDepth, data=travel_for_model,random = ~ 1 | Device)
# Set reference as day_of_snowfall
travel_for_model$snowfall_category <- relevel(travel_for_model$snowfall_category,
ref="day_of_snowfall")
lme(speed ~ snowfall_category + as.factor(time_of_day) + SnowDepth, data=travel_for_model,random = ~ 1 | Device)
AIC(lme(speed ~ snowfall_category + as.factor(time_of_day) + SnowDepth, data=travel_for_model,random = ~ 1 | Device))
AIC(lme(speed ~ 1, data=travel_for_model,random = ~ 1 | Device))
AIC(lme(speed ~ snowfall_category, data=travel_for_model,random = ~ 1 | Device))
# AIC(lme(speed ~ snowfall_category, data=travel_for_model,random = ~ 1 | Device)) # probably not better than null
AIC(lme(speed ~ as.factor(time_of_day), data=travel_for_model,random = ~ 1 | Device))
AIC(lme(speed ~ as.factor(time_of_day) + SnowDepth, data=travel_for_model,random = ~ 1 | Device))
?glmer
glmer(Behavior ~ 1,data=travel_for_model,random = ~ 1 | Device,family=binomial)
library(lme4)
glmer(Behavior ~ 1,data=travel_for_model,random = ~ 1 | Device,family=binomial)
# Travel speed is largely determined by time of day
rm(travel_for_model)
# Proportion
proportion_for_model <- snowfall_telem %>%
mutate(travel, if_else(Behavior == 1,1,0))
proportion_for_model <- snowfall_telem %>%
mutate(travel, if_else(Behavior == 1,1,0))
proportion_for_model <- snowfall_telem %>%
mutate(travel = if_else(Behavior == 1,1,0))
library(dplyr)
proportion_for_model <- snowfall_telem %>%
mutate(travel = if_else(Behavior == 1,1,0))
View(proportion_for_model)
# Proportion
proportion_for_model <- snowfall_telem %>%
mutate(travel = Behavior) %>%
mutate(resting = if_else(Behavior == 0,1,0))
# Proportion
proportion_for_model <- snowfall_telem %>%
mutate(travel = Behavior) %>%
mutate(resting = if_else(Behavior == 0,1,0)) %>%
select(Device,Date,speed,snowfall_category,SnowDepth,SnowAccum,travel,resting)
# Proportion
proportion_for_model <- snowfall_telem %>%
mutate(travel = Behavior) %>%
mutate(resting = if_else(Behavior == 0,1,0)) %>%
select(Device,Date,speed,snowfall_category,SnowDepth,SnowAccum,travel,resting,time_of_day)
glmer(cbind(travel,resting) ~ snowfall_category+(1|Device),data=proportion_for_model, family=binomial)
library(lme4)
glmer(cbind(travel,resting) ~ snowfall_category+(1|Device),data=proportion_for_model, family=binomial)
anova(glmer(cbind(travel,resting) ~ snowfall_category+(1|Device),data=proportion_for_model, family=binomial))
proportion_for_model$snowfall_category <- relevel(proportion_for_model$snowfall_category,
ref="day_of_snowfall")
anova(glmer(cbind(travel,resting) ~ snowfall_category+(1|Device),data=proportion_for_model, family=binomial))
proportion_for_model <- snowfall_telem %>%
filter(!is.na(Behavior)) %>%
mutate(travel = Behavior) %>%
mutate(resting = if_else(Behavior == 0,1,0)) %>%
select(Device,Date,speed,snowfall_category,SnowDepth,SnowAccum,travel,resting,time_of_day)
proportion_for_model$snowfall_category <- relevel(proportion_for_model$snowfall_category,
ref="day_of_snowfall")
AIC(glmer(cbind(travel,resting) ~ snowfall_category+(1|Device),data=proportion_for_model, family=binomial))
AIC(glmer(cbind(travel,resting) ~ 1 + (1|Device),
data=proportion_for_model, family=binomial))
summary(glmer(cbind(travel,resting) ~ snowfall_category + (1|Device),
data=proportion_for_model, family=binomial)))
summary(glmer(cbind(travel,resting) ~ snowfall_category + (1|Device),
data=proportion_for_model, family=binomial))
AIC(glmer(cbind(travel,resting) ~ snowfall_category +
as.factor(time_of_day) + (1|Device),
data=proportion_for_model, family=binomial))
# Proportion
proportion_for_model <- snowfall_telem %>%
filter(!is.na(Behavior) & !is.na(SnowDepth)) %>%
mutate(travel = Behavior) %>%
mutate(resting = if_else(Behavior == 0,1,0)) %>%
select(Device,Date,speed,snowfall_category,SnowDepth,SnowAccum,travel,resting,time_of_day)
proportion_for_model$snowfall_category <- relevel(proportion_for_model$snowfall_category,
ref="day_of_snowfall")
AIC(glmer(cbind(travel,resting) ~ 1 + (1|Device),
data=proportion_for_model, family=binomial))
AIC(glmer(cbind(travel,resting) ~ snowfall_category + (1|Device),
data=proportion_for_model, family=binomial)) # better than null
AIC(glmer(cbind(travel,resting) ~ snowfall_category +
as.factor(time_of_day) + (1|Device),
data=proportion_for_model, family=binomial))
AIC(glmer(cbind(travel,resting) ~ snowfall_category +
as.factor(time_of_day) + SnowDepth + (1|Device),
data=proportion_for_model, family=binomial))
AIC(glmer(cbind(travel,resting) ~ snowfall_category +
as.factor(time_of_day) + scale(SnowDepth) + (1|Device),
data=proportion_for_model, family=binomial))
summary(glmer(cbind(travel,resting) ~ snowfall_category +
as.factor(time_of_day) + scale(SnowDepth) + (1|Device),
data=proportion_for_model, family=binomial))
table(proportion_for_model$Device,proportion_for_model$snowfall_category)
3*48

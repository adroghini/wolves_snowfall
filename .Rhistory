ungroup(Device) %>%
select(Date,lat,lon) %>%
rename(date = Date) %>%
distinct()
sunset.df <- getSunlightTimes(data = sunset.df,
keep = c("sunset","sunrise"),
tz = "Etc/GMT-7")
View(sunset.df)
# Obtain sunrise/sunset times
sunset.df <- tel.fixr30 %>%
ungroup(Device) %>%
select(Date,lat,lon) %>%
rename(date = Date) %>%
distinct()
sunset.df$date <- as.Date(sunset.df$date, format="%Y-%m-%d",tz="Etc/GMT-7")
sunset.df <- getSunlightTimes(data = sunset.df,
keep = c("sunset","sunrise"),
tz = "Etc/GMT-7")
View(sunset.df)
View(sunset.df)
getSunlightTimes(date = Sys.Date(), lat = 50.1, lon = 1.83, tz = "CET")
getSunlightTimes(date = Sys.Date(), lat = 50.1, lon = 1.83, tz = "CET",keep="sunrise")
sunset.df$lon<- sunset.df$lon*-1
View(sunset.df)
sunset.df <- getSunlightTimes(data = sunset.df,
keep = c("sunset","sunrise"),
tz = "Etc/GMT-7")
sunset.df$date <- as.Date(sunset.df$date, format="%Y-%m-%d",tz="Etc/GMT-7")
sunset.df <- getSunlightTimes(data = sunset.df,
keep = c("sunset","sunrise"),
tz = "Etc/GMT-7")
View(sunset.df)
# Left join to append sunrise/sunset times to tel.fixr30
test <- left_join(tel.fixr30,sunset.df,by=c("Date"="Date","lat"="lat","lon"="lon"))
sunset.df <- sunset.df %>%
rename(Date = date)
sunset.df$date <- as.Date(sunset.df$date, format="%Y-%m-%d",tz="Etc/GMT-7")
sunset.df <- sunset.df %>%
rename(Date = date)
sunset.df$date <- as.Date(sunset.df$date, format="%Y-%m-%d",tz="Etc/GMT-7")
sunset.df <- sunset.df %>%
rename(Date = date)
sunset.df <- dplyr::rename(sunset.df,Date = date)
rm(sunset.df)
sunset.df <- tel.fixr30 %>%
ungroup(Device) %>%
select(Date,lat,lon) %>%
rename(date = Date) %>%
distinct()
sunset.df$lon<- sunset.df$lon*-1 # ?
sunset.df$date <- as.Date(sunset.df$date, format="%Y-%m-%d",tz="Etc/GMT-7")
sunset.df <- getSunlightTimes(data = sunset.df,
keep = c("sunset","sunrise"),
tz = "Etc/GMT-7")
sunset.df$date <- as.Date(sunset.df$date, format="%Y-%m-%d",tz="Etc/GMT-7")
sunset.df <- dplyr::rename(sunset.df,Date = date)
# Left join to append sunrise/sunset times to tel.fixr30
test <- left_join(tel.fixr30,sunset.df,by=c("Date"="Date","lat"="lat","lon"="lon"))
View(test)
# Calcule sunrise/sunset times
# Round to nearest .1 decimal point or else getSunlightTimes takes a while to run
# Create rounded lat / lon column
tel.fixr30 <- tel.fixr30 %>%
mutate(lat = round(Latitude,digits=1),lon = (round(Longitude,digits=1)*-1))
View(tel.fixr30)
# Obtain sunrise/sunset times
sunset.df <- tel.fixr30 %>%
ungroup(Device) %>%
select(Date,lat,lon) %>%
rename(date = Date) %>%
distinct()
sunset.df$date <- as.Date(sunset.df$date, format="%Y-%m-%d",tz="Etc/GMT-7")
sunset.df <- getSunlightTimes(data = sunset.df,
keep = c("sunset","sunrise"),
tz = "Etc/GMT-7")
sunset.df$date <- as.Date(sunset.df$date, format="%Y-%m-%d",tz="Etc/GMT-7")
sunset.df <- dplyr::rename(sunset.df,Date = date)
# Left join to append sunrise/sunset times to tel.fixr30
test <- left_join(tel.fixr30,sunset.df,by=c("Date"="Date","lat"="lat","lon"="lon"))
View(test)
# Check if results make sense
sunset.df %>%
group_by(Year, Month) %>%
summarize(mean.sunrise = mean(sunrise))
# Check if results make sense
sunset.df %>%
summarize(mean.sunrise = mean(sunrise))
# Check if results make sense
test %>%
group_by(Year, Month)
# Check if results make sense
test %>%
ungroup(Device) %>%
group_by(Year, Month) %>%
summarize(mean.sunrise = mean(sunrise))
# Check if results make sense
range(test$sunrise)
range(test$sunset)
View(subset(test,Date=="2013-03-10"))
View(subset(test,Date>"2013-03-08"&Date<"2013-03-11"))
test$time_of_day <- "NA"
test <- test %>%
mutate(time_of_day,ifelse(DateTime >= sunrise & DateTime < sunset, "day", "night"))
# Left join to append sunrise/sunset times to tel.fixr30
test <- left_join(tel.fixr30,sunset.df,by=c("Date"="Date","lat"="lat","lon"="lon"))
test$time_of_day <- "NA"
test <- test %>%
mutate(time_of_day=ifelse(DateTime >= sunrise & DateTime < sunset, "day", "night"))
test$DateTime[75]
test$sunrise[75]
DateTime[75] >= sunrise[75]
test$DateTime[75] >= test$sunrise[75]
sunset.df <- tel.fixr30 %>%
ungroup(Device) %>%
select(Date,lat,lon) %>%
rename(date = Date) %>%
distinct()
sunset.df$date <- as.Date(sunset.df$date, format="%Y-%m-%d",tz="Etc/GMT-7")
sunset.df <- getSunlightTimes(data = sunset.df,
keep = c("sunset","sunrise"),
tz = "Etc/GMT-7")
# Obtain sunrise/sunset times
sunset.df <- tel.fixr30 %>%
ungroup(Device) %>%
select(Date,lat,lon) %>%
mutate(date = Date - 1) %>%
distinct()
sunset.df$date <- as.Date(sunset.df$date, format="%Y-%m-%d",tz="Etc/GMT-7")
sunset.df <- getSunlightTimes(data = sunset.df,
keep = c("sunset","sunrise"),
tz = "Etc/GMT-7")
# Left join to append sunrise/sunset times to tel.fixr30
test <- left_join(tel.fixr30,sunset.df,by=c("Date"="Date","lat"="lat","lon"="lon"))
View(test)
sunset.df <- select(sunset.df, -date)
# Left join to append sunrise/sunset times to tel.fixr30
test <- left_join(tel.fixr30,sunset.df,by=c("Date"="Date","lat"="lat","lon"="lon"))
test$time_of_day <- "NA"
test <- test %>%
mutate(time_of_day=ifelse(DateTime >= sunrise & DateTime < sunset, "day", "night"))
table(test$time_of_day)
table(test$time_of_day,test$Hour)
table(test$Hour,test$time_of_day)
# Check if results make sense
range(test$sunrise)
range(test$sunset)
table(test$Hour,test$time_of_day)
View(subset(test,Year==2013 & Month == 3 & Day >= 9 & Day < 12))
tel.fixr30 <- test %>%
select(-c(lat,lon))
rm(sunset.df, test)
tel.fixr30 %>%
group_by(Device,Date,time_of_day) %>%
summarize(N = length(Behavior), travelling = sum(Behavior), resting = travelling - N,
prop.move = travelling / N, prop.rest = 1 - prop.move)
tel.fixr30 %>%
group_by(Device,Date,time_of_day) %>%
summarize(N = length(Behavior), travelling = sum(Behavior), resting = travelling - N,
prop.move = travelling / N, prop.rest = 1 - prop.move)
tel.fixr30 %>%
filter(!is.na(NewFixRate)) %>%
group_by(Device,Date,time_of_day) %>%
summarize(N = length(Behavior), travelling = sum(Behavior), resting = travelling - N,
prop.move = travelling / N, prop.rest = 1 - prop.move)
tel.fixr30 %>%
filter(!is.na(NewFixRate)) %>%
group_by(Device,Date,time_of_day) %>%
summarize(N = length(Behavior), travelling = sum(Behavior), resting = N - travelling,
prop.move = travelling / N, prop.rest = 1 - prop.move)
tel.fixr30 %>%
filter(!is.na(NewFixRate)) %>%
group_by(Device,time_of_day) %>%
summarize(N = length(Behavior), travelling = sum(Behavior), resting = N - travelling,
prop.move = travelling / N, prop.rest = 1 - prop.move)
tel.fixr30 %>%
filter(!is.na(NewFixRate)) %>%
group_by(Device,time_of_day) %>%
summarize(N = length(Behavior), travelling = sum(Behavior), resting = N - travelling,
prop.move = travelling / N, prop.rest = 1 - prop.move, mean.speed = mean(speed))
diurnal.summary <- tel.fixr30 %>%
filter(!is.na(NewFixRate)) %>%
group_by(Device,time_of_day) %>%
summarize(N = length(Behavior), travelling = sum(Behavior), resting = N - travelling,
prop.move = travelling / N, prop.rest = 1 - prop.move, mean.speed = mean(speed))
View(diurnal.summary)
plot(diurnal.summary,prop.move ~ time_of_day)
plot(diurnal.summary,prop.move, time_of_day)
?plot
plot(diurnal.summary$time_of_day,diurnal.summary$prop.move)
plot(as.factor(diurnal.summary$time_of_day),diurnal.summary$prop.move)
plot(as.factor(diurnal.summary$time_of_day),diurnal.summary$speed)
plot(as.factor(diurnal.summary$time_of_day),diurnal.summary$mean.speed)
rm(diurnal.summary)
# Load camera data
deploy2013 <- read.csv('data/cemeras/deploy2014.csv', stringsAsFactors = FALSE)
# Load camera data
deploy2013 <- read.csv('data/cameras/deploy2014.csv', stringsAsFactors = FALSE)
# Load camera data
deploy2013 <- read.csv('data/cameras/deploy2013.csv', stringsAsFactors = FALSE)
deploy2014 <- read.csv('data/cameras/deploy2014.csv', stringsAsFactors = FALSE)
View(deploy2013)
View(deploy2014)
# Load camera data
deploy2013 <- read.csv('data/cameras/deploy2013.csv', stringsAsFactors = FALSE)
View(deploy2013)
# Load required packages
library(dplyr)
filter(!(grepl("Closed"))
filter(!(grepl("Closed")$PlotID)
test <- deploy2013 %>%
filter(!(grepl("Closed")$PlotID)
)
# For deploy2013, remove cameras placed in "closed" habitats (canopy cover >30%)
test <- deploy2013 %>%
filter(PlotID contains ("Close"))
# For deploy2013, remove cameras placed in "closed" habitats (canopy cover >30%)
test <- deploy2013 %>%
filter(PlotID contains("Close"))
?filter
?grepl
# For deploy2013, remove cameras placed in "closed" habitats (canopy cover >30%)
test <- deploy2013 %>%
filter(PlotID, grepl("Close"))
charmatch(deploy2013$PlotID,"Closed")
grepl(deploy2013$PlotID,"Closed")
grepl(unique(deploy2013$PlotID),"Closed")
grep("Closed",deploy2013$PlotID))
grep("Closed",deploy2013$PlotID)
grepl("Closed",deploy2013$PlotID)
grepl("Close",deploy2013$PlotID)
View(deploy2013)
grepl("Close",deploy2013$PlotID)!=TRUE
# For deploy2013, remove cameras placed in "closed" habitats (canopy cover >30%)
test <- deploy2013 %>%
filter(PlotID, grepl("Close",deploy2013$PlotID)!=TRUE)
# For deploy2013, remove cameras placed in "closed" habitats (canopy cover >30%)
test <- deploy2013 %>%
filter(grepl("Close",deploy2013$PlotID)!=TRUE)
View(test)
# For deploy2013, remove cameras placed in "closed" habitats (canopy cover >30%)
deploy2013 <- deploy2013 %>%
filter(grepl("Close",deploy2013$PlotID)!=TRUE)
rm(test)
?gather
library(tidyr)
?gather
?gather
mini_iris <- iris[c(1, 51, 101), ]
View(mini_iris)
gather(mini_iris, key = flower_att, value = measurement,
Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)
gather(deploy2013, key = snow_depth, value = measurement,
sn1,sn2,sn3,sn4)
test<- deploy2013 %>%
gather(key = snow_depth, value = measurement,
sn1,sn2,sn3,sn4) %>%
gather(key = sinking_depth, value = measurement, cn1,cn2,cn3,cn4)
View(test)
test<- deploy2013 %>%
gather(key = snow_depth, value = measurement,
sn1,sn2,sn3,sn4)
test<- deploy2013 %>%
gather(key = snow_depth, value = measurement,
sn1,sn2,sn3,sn4) %>%
gather(key = sinking_depth, value = measurement2, cn1,cn2,cn3,cn4)
test<- deploy2013 %>%
gather(key = snow_depth, value = measurement,
sn1,sn2,sn3,sn4,cn1,cn2,cn3,cn4)
test<- deploy2013 %>%
gather(key = snow_condition, value = measurement,
sn1,sn2,sn3,sn4,cn1,cn2,cn3,cn4) %>%
test<- deploy2013 %>%
gather(key = snow_condition, value = measurement,
sn1,sn2,sn3,sn4,cn1,cn2,cn3,cn4)
test<- deploy2013 %>%
gather(key = snow_condition, value = measurement,
sn1,sn2,sn3,sn4,cn1,cn2,cn3,cn4)
?replace
unique(snow_condition)
unique(test$snow_condition)
# For deploy2013, remove cameras placed in "closed" habitats (canopy cover >30%)
deploy2013 <- deploy2013 %>%
filter(grepl("Close",PlotID)!=TRUE)
# Load camera data
deploy2013 <- read.csv('data/cameras/deploy2013.csv', stringsAsFactors = FALSE)
# For deploy2013, remove cameras placed in "closed" habitats (canopy cover >30%)
deploy2013 <- deploy2013 %>%
filter(grepl("Close",PlotID)!=TRUE)
?sep
?cut
test<- deploy2013 %>%
gather(key = snow_condition, value = measurement,
sn1,sn2,sn3,sn4,cn1,cn2,cn3,cn4)
substr(test$snow_condition,start=1,stop=2)
substr(test$snow_condition,start=2,stop=4)
substr(test$snow_condition,start=3,stop=3)
test<- deploy2013 %>%
gather(key = snow_condition, value = measurement,
sn1,sn2,sn3,sn4,cn1,cn2,cn3,cn4) %>%
mutate(measure_type = substr(test$snow_condition,start=1,stop=2)) %>%
mutate(sample_no = substr(test$snow_condition,start=3,stop=3)) %>%
replace(list=unique(measure_type),values=c(snow_depth,sinking_depth))
test<- deploy2013 %>%
gather(key = snow_condition, value = measurement,
sn1,sn2,sn3,sn4,cn1,cn2,cn3,cn4) %>%
mutate(measure_type = substr(test$snow_condition,start=1,stop=2)) %>%
mutate(sample_no = substr(test$snow_condition,start=3,stop=3))
View(test)
test<- deploy2013 %>%
gather(key = snow_condition, value = measurement,
sn1,sn2,sn3,sn4,cn1,cn2,cn3,cn4) %>%
mutate(measure_type = substr(test$snow_condition,start=1,stop=2)) %>%
transmute(sample_no = substr(test$snow_condition,start=3,stop=3))
test<- deploy2013 %>%
gather(key = snow_condition, value = measurement,
sn1,sn2,sn3,sn4,cn1,cn2,cn3,cn4) %>%
mutate(measure_type = substr(test$snow_condition,start=1,stop=2)) %>%
mutate(sample_no = substr(test$snow_condition,start=3,stop=3)) %>%
select(-snow_condition)
test<- deploy2013 %>%
gather(key = snow_condition, value = measurement,
sn1,sn2,sn3,sn4,cn1,cn2,cn3,cn4) %>%
mutate(measure_type = substr(test$snow_condition,start=1,stop=2)) %>%
mutate(sample_no = substr(test$snow_condition,start=3,stop=3))
# Load camera data
deploy2013 <- read.csv('data/cameras/deploy2013.csv', stringsAsFactors = FALSE)
# For deploy2013, remove cameras placed in "closed" habitats (canopy cover >30%)
deploy2013 <- deploy2013 %>%
filter(grepl("Close",PlotID)!=TRUE)
test<- deploy2013 %>%
gather(key = snow_condition, value = measurement,
sn1,sn2,sn3,sn4,cn1,cn2,cn3,cn4) %>%
mutate(measure_type = substr(test$snow_condition,start=1,stop=2)) %>%
mutate(sample_no = substr(test$snow_condition,start=3,stop=3))
test<- deploy2013 %>%
gather(key = snow_condition, value = measurement,
sn1,sn2,sn3,sn4,cn1,cn2,cn3,cn4) %>%
mutate(measure_type = substr(snow_condition,start=1,stop=2)) %>%
mutate(sample_no = substr(snow_condition,start=3,stop=3))
test<- deploy2013 %>%
gather(key = snow_condition, value = measurement,
sn1,sn2,sn3,sn4,cn1,cn2,cn3,cn4) %>%
mutate(measure_type = substr(snow_condition,start=1,stop=2)) %>%
mutate(sample_no = substr(snow_condition,start=3,stop=3)) %>%
select(-snow_condition)
replace(list=unique(test$measure_type),values=c(snow_depth,sinking_depth))
replace(list=unique(test$measure_type),values=c("snow_depth","sinking_depth"))
?replace
replace(test,list=unique(test$measure_type),values=c("snow_depth","sinking_depth"))
Z<-replace(list=unique(measure_type),values=c(snow_depth,sinking_depth))
Z<-replace(test,list=unique(measure_type),values=c("snow_depth","sinking_depth"))
Z<-replace(test,list=unique(test$measure_type),values=c("snow_depth","sinking_depth"))
View(Z)
Z<-replace(test,measure_type=="sn","snow_depth")
Z<-replace(test,test$measure_type=="sn","snow_depth")
Z<-replace(test,test$measure_type="sn","snow_depth")
replace(test,test$measure_type="sn","snow_depth")
replace(test,test$measure_type=="sn","snow_depth")
replace(test,measure_type=="sn","snow_depth")
mutate(test,measure_type=replace(measure_type,"sn"),"snow_depth")
Z <- test %>%
mutate(measure_type = replace(measure_type == "sn"), "snow_depth"))
Z <- test %>%
mutate(measure_type = replace(measure_type == "sn"), "snow_depth"))
Z <- test %>%
mutate(measure_type = replace(measure_type == "sn", "snow_depth"))
Z <- test %>%
mutate(measure_type = replace(measure_type, which(measure_type == "sn"),
"snow_depth"))
View(Z)
Z <- test %>%
mutate(measure_type = replace(measure_type,
ifelse(which(measure_type == "sn"),
"snow_depth"),"sinking_depth")
)
Z <- test %>%
mutate(measure_type = replace(measure_type,
ifelse(which(measure_type == "sn"),
"snow_depth"),"sinking_depth"))
Z <- test %>%
mutate(measure_type = replace(measure_type,
if_else(which(measure_type == "sn"),
"snow_depth"),"sinking_depth"))
Z <- test %>%
recode(measure_type,sn = "snow_depth")
Z <- test %>%
recode(measure_type,sn = "snow_depth")
Z <- test %>%
recode(sn = "snow_depth")
?recorde
?recode
Z <- test %>%
recode(measure_type,sn = "snow_depth")
Z <- test %>%
recode(test$measure_type,sn = "snow_depth")
Z <- test %>%
mutate(measure_type = replace(measure_type , measure_type != "sn", "sinking_depth")
)
View(Z)
?ifelse
Z <- test %>%
mutate(measure_type = replace(measure_type,
ifelse(measure_type = "sn", "snow_depth",
"sinking_depth")))
Z <- test %>%
mutate(measure_type = replace(measure_type,
ifelse(measure_type == "sn", "snow_depth",
"sinking_depth")))
Z <- test %>%
mutate(measure_type = replace(measure_type,
measure_type == "sn", "snow_depth"
))
View(Z)
?if_else
Z <- test %>%
mutate(measure_type = replace(measure_type, if_else(
measure_type == "sn", "snow_depth",
"sinking_depth")))
Z <- test %>%
mutate(measure_type = if_else(
measure_type == "sn", "snow_depth",
"sinking_depth")))
Z <- test %>%
mutate(measure_type = if_else(measure_type = "sn", "snow_depth",
"sinking_depth")))
Z <- test %>%
mutate(measure_type = if_else(measure_type = "sn", "snow_depth",
"sinking_depth"))
Z <- test %>%
mutate(measure_type = if_else(measure_type == "sn", "snow_depth",
"sinking_depth"))
View(Z)
test<- deploy2013 %>%
gather(key = snow_condition, value = measurement,
sn1,sn2,sn3,sn4,cn1,cn2,cn3,cn4) %>%
mutate(measure_type = substr(snow_condition,start=1,stop=2)) %>%
mutate(sample_no = substr(snow_condition,start=3,stop=3)) %>%
select(-snow_condition) %>%
mutate(measure_type = if_else(measure_type == "sn", "snow_depth",
"sinking_depth"))
View(test)
rm(Z,test,mini_iris)
deploy2013 <- deploy2013 %>%
gather(key = snow_condition, value = measurement,
sn1,sn2,sn3,sn4,cn1,cn2,cn3,cn4) %>%
mutate(measure_type = substr(snow_condition,start=1,stop=2)) %>%
mutate(sample_no = substr(snow_condition,start=3,stop=3)) %>%
select(-snow_condition) %>%
mutate(measure_type = if_else(measure_type == "sn", "snow_depth",
"sinking_depth"))
View(deploy2013)
# For deploy2014, restrict data to only those cameras for which a measurement
# pole was installed (allowing for snow depth readings)
deploy2014 <- deploy2014 %>%
filter(MeasurePole=="Yes")
deploy2014 <- read.csv('data/cameras/deploy2014.csv', stringsAsFactors = FALSE)
# For deploy2014, restrict data to only those cameras for which a measurement
# pole was installed (allowing for snow depth readings)
# Remove camera Near3 which only had 10 pictures, all taken on the same day
deploy2014 <- deploy2014 %>%
filter(MeasurePole=="Yes" & CameraStation!="Near3")
unique(deploy2013$PlotID)
length(unique(deploy2013$PlotID))
deploy2014 <- deploy2014 %>%
filter(MeasurePole=="Yes" & CameraStation!="Near3") %>%
gather(key = snow_depth, value = measurement,
SnowDepth1,SnowDepth2,SnowDepth3,SnowDepth4)
deploy2014 <- read.csv('data/cameras/deploy2014.csv', stringsAsFactors = FALSE)
deploy2014 <- deploy2014 %>%
filter(MeasurePole=="Yes" & CameraStation!="Near3") %>%
gather(key = measure_type, value = measurement,
SnowDepth1,SnowDepth2,SnowDepth3,SnowDepth4) %>%
mutate(sample_no = substr(measure_type,start=10,stop=10))
?replace
deploy2014$measure_type <- "snow_depth"
# Add year column
# Clean columns and merge into a single file
names(deploy2013)
names(deploy2014)
# Add year column
# Clean columns and merge into a single file
deploy2013 <- select(deploy2013, -c(3,6:14))
View(deploy2013)
names(deploy2014)
deploy2014 <- select(deploy2014, -c(1,4,7:16))
names(deploy2013)
deploy2013 <- rename(deploy2013,camera = PlotID,deploy.date=DeployDate,
easting=X,northing=Y)
test <- as.Date(deploy2013$deploy.date, format="%Y-%m-%d",tz="Etc/GMT-7")
test <- as.Date(deploy2013$deploy.date, format="%y-%m-%d",tz="Etc/GMT-7")
rm(test)
deploy2013$deploy.date <- as.Date(deploy2013$deploy.date, format="%y-%m-%d",tz="Etc/GMT-7")
names(deploy2014)
deploy2014 <- rename(deploy2014,camera = CameraStation,
deploy.date=DateDeployed,
easting=UTMEast,northing=UTMNorth)
deploy2014$deploy.date <- as.Date(deploy2014$deploy.date,
format="%m/%d/%Y",tz="Etc/GMT-7")
deploy2013 <- deploy2013 %>%
select(camera:northing,measure_type,measurement,sample_no)
cams.deploy <- rbind(deploy2013,deploy2014)
View(cams.deploy)
rm(deploy2013,deploy2014)
# Load snow depth data
depth2013 <- read.csv('data/cameras/depth2013.csv',stringsAsFactors = FALSE)
depth2014 <- read.csv('data/cameras/depth2014.csv',stringsAsFactors = FALSE)
View(depth2013)
View(depth2014)
names(depth2013)
names(depth2014)
?rbind.fill
??rbind.fill

tel.fixr30$DateTime[1] + 12:00:00
tel.fixr30$DateTime[1] + (12*60)
tel.fixr30$DateTime[1] + (12*3600)
tel.fixr30$CamDateTime <- tel.fixr30$DateTime - 12
tel.fixr30$CamDateTime <- tel.fixr30$DateTime - (12*3600)
nrow(subset(test,SnowAccum>=5))
nrow(unique(subset(test,SnowAccum>=5)$Date))
nrow(unique(subset(test,SnowAccum>=5))$Date)
View(test)
# For each daily mean position,
# Find cameras for which snow accumulation data are available
# Remove NAs of snow accumulation
test <- left_join(mean.position,cams.depth,by="Date")
test <- filter(test,!is.na(SnowAccum))
View(cams.depth)
View(test)
test <- filter(test,!is.na(SnowAccum.y))
test <- filter(test,!is.na(SnowAccum.y))
test <- test %>%
arrange(Device,Date) %>%
group_by(Device) %>%
mutate (zwolf = mean.x + 1i*mean.y, zcams = easting.y +1i*northing.y)
test <- test %>%
arrange(Device,Date) %>%
group_by(Device) %>%
mutate (zwolf = mean.x + 1i*mean.y, zcams = easting.y +1i*northing.y)
test$steps <- NA + 1i # must be complex number
for (i in 1:nrow(test)) {
test$steps[i] <- diff(c(test$zwolf[i],test$zcams[i]))
}
# Take absolute value expressed in kilometers
test <- mutate(test,dist.from.cams=Mod(steps/1000))
# For each wolf & date, select minimum distance
test <- test %>%
group_by(Device,Date) %>%
filter(dist.from.cams==min(dist.from.cams))
mean.position <- test %>%
select(-c(zwolf,zcams,steps))
rm(i, test)
# Join mean.position file back into tel.fixr30
test <- left_join(tel.fixr30, mean.position,
by = c("Device" = "Device", "Date" = "Date"))
View(test)
View(mean.position)
test <- dplyr::left_join(tel.fixr30, mean.position,
by = c("Device" = "Device", "Date" = "Date"))
test <- dplyr::left_join(tel.fixr30, mean.position,
by = c("Device" = "Device", "Date" = "Date"))
View(test)
mean.position <- tel.fixr30 %>%
arrange(Device,UID) %>%
group_by(Device,Date) %>%
summarise(mean.x=mean(Easting),mean.y=mean(Northing))
View(mean.position)
test <- left_join(mean.position,cams.depth,by="Date")
test <- filter(test,!is.na(SnowAccum.y))
test <- left_join(mean.position,cams.depth,by="Date")
test <- filter(test,!is.na(SnowAccum))
test <- test %>%
arrange(Device,Date) %>%
group_by(Device) %>%
mutate (zwolf = mean.x + 1i*mean.y, zcams = easting.y +1i*northing.y)
test$steps <- NA + 1i # must be complex number
for (i in 1:nrow(test)) {
test$steps[i] <- diff(c(test$zwolf[i],test$zcams[i]))
}
test <- test %>%
arrange(Device,Date) %>%
group_by(Device) %>%
mutate (zwolf = mean.x + 1i*mean.y, zcams = easting.y +1i*northing.y)
test <- test %>%
arrange(Device,Date) %>%
group_by(Device) %>%
mutate (zwolf = mean.x + 1i*mean.y, zcams = easting +1i*northing)
test$steps <- NA + 1i # must be complex number
for (i in 1:nrow(test)) {
test$steps[i] <- diff(c(test$zwolf[i],test$zcams[i]))
}
test <- mutate(test,dist.from.cams=Mod(steps/1000))
test <- test %>%
group_by(Device,Date) %>%
filter(dist.from.cams==min(dist.from.cams))
mean.position <- test %>%
select(-c(zwolf,zcams,steps))
View(mean.position)
rm(i, test)
test <- dplyr::left_join(tel.fixr30, mean.position,
by = c("Device" = "Device", "Date" = "Date"))
nrow(unique(subset(test,SnowAccum>=5))$Date)
View(test)
View(mean.position)
test <- dplyr::left_join(tel.fixr30, mean.position,
by = c("Device" = "Device", "Date" = "Date"))
View(test)
View(tel.fixr30)
View(mean.position)
test <- left_join(tel.fixr30, mean.position,
by = c("Device" = "Device", "Date" = "Date"))
test <- left_join(tel.fixr30, mean.position,
by = c("Device" = "Device", "Date" = "Date"))
View(test)
test <- left_join(tel.fixr30, mean.position,
by = c("Device" = "Device", "Date" = "Date"))
library(dplyr)
test <- left_join(tel.fixr30, mean.position,
by = c("Device" = "Device", "Date" = "Date"))
View(test)
View(mean.position)
View(tel.fixr30)
tel.fixr30<-tel.fixr30 %>%
ungroup()
test <- left_join(tel.fixr30, mean.position,
by = c("Device" = "Device", "Date" = "Date"))
test <- left_join(tel.fixr30, mean.position,
by = c("Device" = "Device", "Date" = "Date"))
View(test)
mean.position <- as.data.frame(mean.position)
# Join mean.position file back into tel.fixr30
test <- left_join(tel.fixr30, mean.position,
by = c("Device" = "Device", "Date" = "Date"))
View(test)
tel.fixr30 <- as.data.frame(tel.fixr30)
# Join mean.position file back into tel.fixr30
test <- left_join(tel.fixr30, mean.position,
by = c("Device" = "Device", "Date" = "Date"))
tel.fixr30<-tel.fixr30 %>%
ungroup()
tel.fixr30<-tel.fixr30 %>%
ungroup(Device)
# Join mean.position file back into tel.fixr30
test <- left_join(tel.fixr30, mean.position,
by = c("Device" = "Device", "Date" = "Date"))
View(test)
names(tel.fixr30)
names(mean.position)
# Join mean.position file back into tel.fixr30
test <- left_join(tel.fixr30, mean.position,
by = c("Device" = "Device"))
test <- left_join(tel.fixr30, mean.position,
by = c("Device" = "Device",
as.character("Date") = as.character("Date")))
test <- left_join(tel.fixr30, mean.position,
by = c("Device" = "Device",
"Date" = "Date"))
View(test)
mean.position$DateChar <- as.character(mean.position$Date)
View(mean.position)
tel.fixr30$DateChar <- as.character(tel.fixr30$Date)
# Join mean.position file back into tel.fixr30
test <- left_join(tel.fixr30, mean.position,
by = c("Device" = "Device",
"DateChar" = "DateChar"))
# Join mean.position file back into tel.fixr30
test <- left_join(tel.fixr30, mean.position,
by = c("Device",
"DateChar"))
rm(test)
test <- left_join(tel.fixr30, mean.position,
by = c("Device",
"DateChar"))
mean.position<-select(mean.position,-DateChar)
tel.fixr30<-select(tel.fixr30,-DateChar)
test <- left_join(tel.fixr30, mean.position,
by = c("Device",
"DateChar"))
# Join mean.position file back into tel.fixr30
test <- left_join(tel.fixr30, mean.position,
by = c("Device",
"Date"))
nrow(unique(subset(test,SnowAccum>=5))$Date)
nrow(subset(test,SnowAccum>=5))
View(test)
tel.fixr30$CamDate <- as.date(tel.fixr30$CamDateTime)
tel.fixr30$CamDate <- as.Date(tel.fixr30$CamDateTime)
View(tel.fixr30)
names(tel.fixr30)
tel.fixr30<-select(tel.fixr30,-c(CamDateTime,CamDate))
# To make sure that the movement metrics we are calculating for wolves =
# the date at which a snowfall was detected, substract 12 hours from
# current DateTime telemetry. The date will be equivalent to the date at
# which the camera detected a snowfall
tel.fixr30 <- tel.fixr30 %>%
# which the camera detected a snowfall
tel.fixr30 <- tel.fixr30 %>%
mutate(CamDateTime = DateTime - (12*3600)) %>%
transmute(CamDate = as.Date(CamDateTime))
View(tel.fixr30)
View(test)
test[,c(1:2)]
tel.fixr30 <- test[,c(1:23)]
View(tel.fixr30)
View(test)
?transmute
# To make sure that the movement metrics we are calculating for wolves =
# the date at which a snowfall was detected, substract 12 hours from
# current DateTime telemetry. The date will be equivalent to the date at
# which the camera detected a snowfall
test <- tel.fixr30 %>%
mutate(CamDateTime = DateTime - (12*3600)) %>%
mutate(CamDate = as.Date(CamDateTime)) %>%
select(-CamDateTime)
test <- tel.fixr30 %>%
mutate(CamDateTime = DateTime - (12*3600)) %>%
mutate(CamDate = as.Date(CamDateTime)) %>%
select(-CamDateTime)
tel.fixr30<-rename(tel.fixr30,DateTime=DateTime.x)
View(tel.fixr30)
test <- tel.fixr30 %>%
mutate(CamDateTime = DateTime - (12*3600)) %>%
mutate(CamDate = as.Date(CamDateTime)) %>%
select(-CamDateTime)
View(test)
tel.fixr30  <- tel.fixr30 %>%
mutate(CamDateTime = DateTime - (12*3600)) %>%
mutate(CamDate = as.Date(CamDateTime)) %>%
select(-CamDateTime)
backup<-tel.fixr30
mean.position <- tel.fixr30 %>%
arrange(Device,UID) %>%
group_by(Device,CamDate) %>%
summarise(mean.x=mean(Easting),mean.y=mean(Northing))
cam.locations <- cams.deploy %>%
distinct(camera, .keep_all = TRUE)
# For each daily mean position,
# Find cameras for which snow accumulation data are available
# Remove NAs of snow accumulation
test <- left_join(mean.position,cams.depth,by=c("CamDate"="Date"))
test <- filter(test,!is.na(SnowAccum))
test <- test %>%
arrange(Device,CamDate) %>%
group_by(Device) %>%
mutate (zwolf = mean.x + 1i*mean.y, zcams = easting +1i*northing)
test <- test %>%
arrange(Device,CamDate) %>%
group_by(Device) %>%
mutate (zwolf = mean.x + 1i*mean.y, zcams = easting +1i*northing)
for (i in 1:nrow(test)) {
test$steps[i] <- diff(c(test$zwolf[i],test$zcams[i]))
}
test$steps <- NA + 1i # must be complex number
for (i in 1:nrow(test)) {
test$steps[i] <- diff(c(test$zwolf[i], test$zcams[i]))
}
# Take absolute value expressed in kilometers
test <- mutate(test,dist.from.cams=Mod(steps/1000))
View(test)
test <- test %>%
group_by(Device,CamDate) %>%
filter(dist.from.cams==min(dist.from.cams))
mean.position <- test %>%
select(-c(zwolf,zcams,steps))
rm(i, test)
View(mean.position)
names(mean.position)
names(tel.fix)
names(tel.fixr30)
test <- left_join(tel.fixr30, mean.position,
by = c("Device"="Device",
"CamDate"="CamDate"))
# Snow depth is not available for each observation
# Will need to be subset
nrow(subset(test,is.na(SnowAccum)))
test %>%
group_by(Device) %>%
filter(!is.na(SnowAccum)) %>%
summarize(mean.dist = mean(dist.from.cams),
no_of_cams = length(unique(Camera)))
telem_snow <- test
rm(test,mean.position)
View(cams.depth)
View(telem_snow)
rm(test,mean.position,cams.depth,cam.locations,cams.deploy)
names(tel.fixr30)
names(backup)
backup <- tel.fixr30
rm(test,mean.position,cams.depth,cam.locations,cams.deploy,tel.fixr30)
# Isolate snowfall events
snowfall_events <- telem_snow %>%
filter(SnowAccum >= 5) %>%
distinct(Camera,CamDate)
View(snowfall_events)
# Isolate snowfall events
snowfall_events <- telem_snow %>%
filter(SnowAccum >= 5) %>%
distinct(Camera,CamDate) %>%
arrange(CamDate)
# Isolate snowfall events
snowfall_events <- telem_snow %>%
filter(SnowAccum >= 5) %>%
distinct(Camera,CamDate) %>%
select(SnowAccum) %>%
arrange(CamDate)
# Isolate snowfall events
snowfall_events <- telem_snow %>%
filter(SnowAccum >= 5) %>%
distinct(Camera,CamDate, SnowAccum) %>%
select() %>%
arrange(CamDate)
# Isolate snowfall events
snowfall_events <- telem_snow %>%
filter(SnowAccum >= 5) %>%
distinct(Camera,CamDate) %>%
select() %>%
arrange(CamDate)
?distinct
# Isolate snowfall events
snowfall_events <- telem_snow %>%
filter(SnowAccum >= 5) %>%
distinct(Camera,CamDate,.keep_all=TRUE) %>%
arrange(CamDate)
# Isolate snowfall events
snowfall_events <- telem_snow %>%
filter(SnowAccum >= 5) %>%
distinct(Camera,CamDate,.keep_all=TRUE) %>%
select(Camera,CamDate,SnowAccum,Device) %>%
arrange(CamDate)
View(snowfall_events)
# Isolate snowfall events
snowfall_events <- telem_snow %>%
filter(SnowAccum >= 5) %>%
distinct(Device,CamDate,.keep_all=TRUE) %>%
select(Camera,CamDate,SnowAccum,Device) %>%
arrange(CamDate)
snowfall_events <- telem_snow %>%
filter(SnowAccum >= 5) %>%
# distinct(Camera,CamDate,.keep_all=TRUE) %>% # 35 unique snowstorms
distinct(Device,CamDate,.keep_all=TRUE) %>% # 57 total observations
select(Camera,CamDate,SnowAccum,Device) %>%
arrange(CamDate)
unique(snowfall_events$Device)
length(unique(snowfall_events$Device))
snowfall_events <- snowfall_events %>%
mutate(before = CamDate - 1)
# Isolate snowfall events
snowfall_events <- telem_snow %>%
filter(SnowAccum >= 5) %>%
# distinct(Camera,CamDate,.keep_all=TRUE) %>% # 35 unique snowstorms
distinct(Device,CamDate,.keep_all=TRUE) %>% # 57 total observations
select(Camera,CamDate,SnowAccum,Device) %>%
arrange(CamDate)
snowfall_events <- snowfall_events %>%
mutate(three_before = CamDate - 3, two_before = CamDate - 2,
one_before = CamDate - 1,
one_after = CamDate + 1, two_after = CamDate + 2,
three_ after = CamDate + 3)
snowfall_events <- snowfall_events %>%
mutate(three_before = CamDate - 3, two_before = CamDate - 2,
one_before = CamDate - 1,
one_after = CamDate + 1, two_after = CamDate + 2,
three_after = CamDate + 3)
plot(telem_snow, speed ~ SnowAccum)
test <- telem_snow %>%
filter (!is.na(SnowAccum)) %>%
filter (!is.na(speed))
plot(telem_snow, speed ~ SnowAccum)
plot(telem_snow, speed, SnowAccum)
plot(telem_snow$speed, telem$SnowAccum)
plot(telem_snow$speed, telem_snow$SnowAccum)
plot(telem_snow$SnowAccum, telem_snow$speed)
View(telem_snow)
depth2013 <- read.csv('data/cameras/depth2013.csv',stringsAsFactors = FALSE)
depth2014 <- read.csv('data/cameras/depth2014.csv',stringsAsFactors = FALSE)
# Merge into one file
cams.depth <- rbind.fill(depth2013,depth2014)
rm(depth2013,depth2014)
names(cams.depth)
# Fix date/time columns - create them from Image.Name
for(i in 1:nrow(cams.depth)) {
cams.depth$Date[i] <-
unlist(strsplit(cams.depth$Image.Name[i], ' '))[1]
cams.depth$Time[i] <- unlist(strsplit(cams.depth$Image.Name[i], ' '))[2]
cams.depth$Time[i] <- paste(unlist(strsplit(cams.depth$Time[i], '-')),collapse=":")
cams.depth$DateTime[i] <- paste(cams.depth$Date[i], cams.depth$Time[i])
}
rm(i)
# Specify date/time format
cams.depth$Date <- as.Date(cams.depth$Date,
format="%Y-%m-%d",tz="Etc/GMT-7")
cams.depth$DateTime <- as.POSIXct(strptime(cams.depth$DateTime,
format="%Y-%m-%d %H:%M:%S",tz="Etc/GMT-7"))
# Sort columns
cams.depth <- arrange(cams.depth, Camera,DateTime)
# Delete extra columns
# For each camera, create RowID that goes from 1:length of observation
cams.depth <- cams.depth %>%
select(-c(ID,Image.Name,Period,Image.Path,Temp,ImagePath,
Moon.Phase,UID)) %>%
mutate(RowID = 1:length(DateTime))
# Subset to only include cameras in deploy
cams.to.include <- unique(cams.deploy$camera)
cams.depth <- filter(cams.depth, Camera %in% cams.to.include)
# Check - Should have 27 cameras
length(unique(cams.depth$Camera))
rm(cams.to.include)
# Load snow depth data
depth2013 <- read.csv('data/cameras/depth2013.csv',stringsAsFactors = FALSE)
depth2014 <- read.csv('data/cameras/depth2014.csv',stringsAsFactors = FALSE)
# Merge into one file
cams.depth <- rbind.fill(depth2013,depth2014)
rm(depth2013,depth2014)
# Load required packages
library(plyr)
# Merge into one file
cams.depth <- rbind.fill(depth2013,depth2014)
rm(depth2013,depth2014)
# Load snow depth data
depth2013 <- read.csv('data/cameras/depth2013.csv',stringsAsFactors = FALSE)
depth2014 <- read.csv('data/cameras/depth2014.csv',stringsAsFactors = FALSE)
# Merge into one file
cams.depth <- rbind.fill(depth2013,depth2014)
rm(depth2013,depth2014)
names(cams.depth)
# Fix date/time columns - create them from Image.Name
for(i in 1:nrow(cams.depth)) {
cams.depth$Date[i] <-
unlist(strsplit(cams.depth$Image.Name[i], ' '))[1]
cams.depth$Time[i] <- unlist(strsplit(cams.depth$Image.Name[i], ' '))[2]
cams.depth$Time[i] <- paste(unlist(strsplit(cams.depth$Time[i], '-')),collapse=":")
cams.depth$DateTime[i] <- paste(cams.depth$Date[i], cams.depth$Time[i])
}
rm(i)
# Specify date/time format
cams.depth$Date <- as.Date(cams.depth$Date,
format="%Y-%m-%d",tz="Etc/GMT-7")
cams.depth$DateTime <- as.POSIXct(strptime(cams.depth$DateTime,
format="%Y-%m-%d %H:%M:%S",tz="Etc/GMT-7"))
# Sort columns
cams.depth <- arrange(cams.depth, Camera,DateTime)
# Delete extra columns
# For each camera, create RowID that goes from 1:length of observation
cams.depth <- cams.depth %>%
select(-c(ID,Image.Name,Period,Image.Path,Temp,ImagePath,
Moon.Phase,UID)) %>%
mutate(RowID = 1:length(DateTime))
# Subset to only include cameras in deploy
cams.to.include <- unique(cams.deploy$camera)
View(cams.depth)
rm(cams.depth)
rm(test)
# Isolate snowfall events
snowfall_events <- telem_snow %>%
filter(SnowAccum >= 5) %>%
# distinct(Camera,CamDate,.keep_all=TRUE) %>% # 35 unique snowstorms
distinct(Device,CamDate,.keep_all=TRUE) %>% # 57 total observations
select(Camera,CamDate,SnowAccum,Device) %>%
arrange(CamDate)
snowfall_events <- snowfall_events %>%
mutate(two_before = CamDate - 2,
one_before = CamDate - 1,
one_after = CamDate + 1, two_after = CamDate + 2,
three_after = CamDate + 3)
for (i in 1:nrow(snowfall_events)) {
if (snowfall_events$CamDate[i] == "2013-03-21"){
snowfall_events$one_after[i] = snowfall_events$CamDate[i] + 2
snowfall_events$two_after[i] = snowfall_events$CamDate[i] + 3
snowfall_events$three_after[i] = snowfall_events$CamDate[i] + 4
}
else if (snowfall_events$CamDate[i] == "2013-03-22"){
snowfall_events$one_before[i] = snowfall_events$CamDate[i] - 2
snowfall_events$two_before[i] = snowfall_events$CamDate[i] - 3
} else {
}
}
# Isolate snowfall events
snowfall_events <- telem_snow %>%
filter(SnowAccum >= 5) %>%
# distinct(Camera,CamDate,.keep_all=TRUE) %>% # 35 unique snowstorms
distinct(Device,CamDate,.keep_all=TRUE) %>% # 57 total observations
select(Camera,CamDate,SnowAccum,Device) %>%
arrange(CamDate)
snowfall_events <- snowfall_events %>%
mutate(two_before = CamDate - 2,
one_before = CamDate - 1,
one_after = CamDate + 1, two_after = CamDate + 2,
three_after = CamDate + 3,
snowfall_day = CamDate)
# Isolate snowfall events
snowfall_events <- telem_snow %>%
filter(SnowAccum >= 5) %>%
# distinct(Camera,CamDate,.keep_all=TRUE) %>% # 35 unique snowstorms
distinct(Device,CamDate,.keep_all=TRUE) %>% # 57 total observations
select(Camera,CamDate,SnowAccum,Device) %>%
arrange(CamDate)
snowfall_events <- snowfall_events %>%
mutate(two_before = CamDate - 2,
one_before = CamDate - 1,
one_after = CamDate + 1, two_after = CamDate + 2,
three_after = CamDate + 3)
for (i in 1:nrow(snowfall_events)) {
if (snowfall_events$CamDate[i] == "2013-03-21"){
snowfall_events$one_after[i] = snowfall_events$CamDate[i] + 2
snowfall_events$two_after[i] = snowfall_events$CamDate[i] + 3
snowfall_events$three_after[i] = snowfall_events$CamDate[i] + 4
}
else if (snowfall_events$CamDate[i] == "2013-03-22"){
snowfall_events$one_before[i] = snowfall_events$CamDate[i] - 2
snowfall_events$two_before[i] = snowfall_events$CamDate[i] - 3
} else {
}
}
2013-03-22 - 2
snowfall_events$CamDate[i] - 2
snowfall_events$CamDate[i]
View(snowfall_events)
snowfall_events$CamDate[35]
snowfall_events$CamDate[35]+2
snowfall_events$CamDate[35]+3
snowfall_events$CamDate[35]+4
snowfall_events$CamDate[36]+4
snowfall_events$CamDate[36]
snowfall_events$CamDate[36] - 2
library(tidyr)
